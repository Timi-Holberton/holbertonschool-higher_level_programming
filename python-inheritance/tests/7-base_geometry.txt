>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator("name", 5)

>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", -3)
Traceback (most recent call last):
...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", "texte")
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", 2.5)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", True)

>>> bg.integer_validator("name", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> class Dummy:
...     pass

>>> bg.integer_validator("name", Dummy())
Traceback (most recent call last):
...
TypeError: name must be an integer

>>> bg.integer_validator("value", 10_000_000_000)

>>> bg.integer_validator("value", "")
Traceback (most recent call last):
...
TypeError: value must be an integer

>>> bg.integer_validator("value", (1, 2))
Traceback (most recent call last):
...
TypeError: value must be an integer

>>> bg.integer_validator("value", {"a": 1})
Traceback (most recent call last):
...
TypeError: value must be an integer

>>> bg.integer_validator("value", {1, 2, 3})
Traceback (most recent call last):
...
TypeError: value must be an integer

>>> bg.integer_validator("value", bytearray(b"123"))
Traceback (most recent call last):
...
TypeError: value must be an integer

>>> isinstance(bg, BaseGeometry)
True

>>> hasattr(bg, "area") and hasattr(bg, "integer_validator")
True

>>> bg = BaseGeometry(5)
Traceback (most recent call last):
TypeError: BaseGeometry() takes no arguments

