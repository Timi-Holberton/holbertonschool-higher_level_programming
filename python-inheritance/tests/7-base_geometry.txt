>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

# -------------------------
# TESTS DE LA METHODE AREA
# -------------------------

# Test que la méthode area() sans argument lève une exception "not implemented"
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test que la méthode area() avec un argument en trop lève un TypeError
>>> bg.area(7)
Traceback (most recent call last):
    ...
TypeError: area() takes 1 positional argument but 2 were given

# -------------------------------
# TESTS DE LA METHODE INTEGER_VALIDATOR
# -------------------------------

# Tests avec valeurs valides
>>> bg.integer_validator("name", 5)
>>> bg.integer_validator("unitest", 12)
>>> bg.integer_validator("name", int(1.8))
>>> bg.integer_validator("name", True)
>>> bg.integer_validator("value", 10000000000)

# Tests avec valeurs invalides (ValueError pour <= 0)
>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", -3)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", -5)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

# Tests avec valeurs invalides (TypeError pour non-entiers)
>>> bg.integer_validator("name", "texte")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", 2.5)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", 1.8)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", [1])
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", {1})
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> class Dummy:
...     pass

>>> bg.integer_validator("name", Dummy())
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("value", "")
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", (1, 2))
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", {"a": 1})
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", {1, 2, 3})
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", bytearray(b"123"))
Traceback (most recent call last):
    ...
TypeError: value must be an integer

# Tests avec appels incorrects à integer_validator
>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("name")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", )
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", 12 , 12)
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

# Tests divers sur BaseGeometry et integer_validator
>>> bg = BaseGeometry(5)
Traceback (most recent call last):
    ...
TypeError: BaseGeometry() takes no arguments

>>> isinstance(bg, BaseGeometry)
True

>>> hasattr(bg, "area") and hasattr(bg, "integer_validator")
True

>>> bg.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
    ...
TypeError: {'a': 1} must be an integer

>>> bg.integer_validator("infnumber", int('inf'))
Traceback (most recent call last):
    ...
ValueError: invalid literal for int() with base 10: 'inf'

>>> isinstance(bg, BaseGeometry)
True
>>> hasattr(bg, "area") and hasattr(bg, "integer_validator")
True
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
>>> bg.integer_validator("poids", "lourd")
Traceback (most recent call last):
...
TypeError: poids must be an integer
>>> bg.integer_validator("hauteur", -10)
Traceback (most recent call last):
...
ValueError: hauteur must be greater than 0
>>> bg.integer_validator("width", 10)
>>> bg.integer_validator("age", "20")
Traceback (most recent call last):
...
TypeError: age must be an integer
>>> bg.integer_validator(None, None)
Traceback (most recent call last):
...
TypeError: None must be an integer
>>> bg.integer_validator(None, 12)
>>> bg.integer_validator("valeur", None)
Traceback (most recent call last):
...
TypeError: valeur must be an integer
>>> bg.integer_validator("size", 0)
Traceback (most recent call last):
...
ValueError: size must be greater than 0
>>> bg.integer_validator("length", -5)
Traceback (most recent call last):
...
ValueError: length must be greater than 0
>>> bg.integer_validator("big", 10_000_000)
>>> bg.integer_validator("prix", 3.14)
Traceback (most recent call last):
...
TypeError: prix must be an integer
>>> bg.integer_validator("actif", True)
Traceback (most recent call last):
...
TypeError: actif must be an integer
>>> bg.integer_validator("collection", [1, 2, 3])
Traceback (most recent call last):
...
TypeError: collection must be an integer
>>> bg.integer_validator("params", {"key": "value"})
Traceback (most recent call last):
...
TypeError: params must be an integer
>>> bg.integer_validator('name', 'string')
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("ensemble", (1, 2))
Traceback (most recent call last):
...
TypeError: ensemble must be an integer
