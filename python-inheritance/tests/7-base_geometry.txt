>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.area(7)
Traceback (most recent call last):
    ...
TypeError: area() takes 1 positional argument but 2 were given

>>> bg.integer_validator("name", 5)

>>> bg.integer_validator("unitest", 12)

>>> bg.integer_validator("name", int(1.8))

>>> bg.integer_validator("name", 0)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", -3)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", -5)
Traceback (most recent call last):
    ...
ValueError: name must be greater than 0

>>> bg.integer_validator("name", "texte")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", 2.5)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", 1.8)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", True)

>>> bg.integer_validator("name", [1, 2, 3])
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", [1])
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", {1})
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("name", None)
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> class Dummy:
...     pass

>>> bg.integer_validator("name", Dummy())
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("value", 10000000000)

>>> bg.integer_validator("value", "")
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", (1, 2))
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", {"a": 1})
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", {1, 2, 3})
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator("value", bytearray(b"123"))
Traceback (most recent call last):
    ...
TypeError: value must be an integer

>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("name")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", )
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("name", 12 , 12)
Traceback (most recent call last):
    ...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

>>> bg = BaseGeometry(5)
Traceback (most recent call last):
    ...
TypeError: BaseGeometry() takes no arguments

>>> isinstance(bg, BaseGeometry)
True

>>> hasattr(bg, "area") and hasattr(bg, "integer_validator")
True

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
TypeError: object() takes no parameters

>>> bg = BaseGeometry()
>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry
 object at...>>

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry
object at...>>

>>> bg.integer_validator("valid number", 1)

>>> bg.integer_validator("invalid number", "number")
Traceback (most recent call last):
TypeError: invalid number must be an integer

>>> bg.integer_validator("another invalid", True)
Traceback (most recent call last):
TypeError: another invalid must be an integer

>>> bg.integer_validator("invalid tuple", (1,))
Traceback (most recent call last):
TypeError: invalid tuple must be an integer

>>> bg.integer_validator("and another", [3])
Traceback (most recent call last):
TypeError: and another must be an integer

>>> bg.integer_validator("more invalid testing", {3, 4})
Traceback (most recent call last):
TypeError: more invalid testing must be an integer

>>> bg.integer_validator("absolutely every possible invalid", None)
Traceback (most recent call last):
TypeError: absolutely every possible invalid must be an integer

>>> bg.integer_validator("invalid int", -1)
Traceback (most recent call last):
ValueError: invalid int must be greater than 0

>>> bg.integer_validator("invalid int", 0)
Traceback (most recent call last):
ValueError: invalid int must be greater than 0

>>> bg.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments:
'name' and 'value'

>>> bg.integer_validator(None)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument:
'value'

>>> bg.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
TypeError: {'a': 1} must be an integer
